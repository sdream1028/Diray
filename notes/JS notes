<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="width=device-width, initial-scale=1.0">
    <title>JavaScript Notes</title>
    <style>
        button {
            width: auto;
            font-size: 25px;
            font-family: monospace;
        }
    </style>
</head>

<body>
    <!--<button onclick="
            alert('this is button');
            //console.log('this is button');
            console.log(name);">
            Button</button>-->

    <script>
        //變數 variable 一個容器:可以把資料儲存在變數裡
        // let 創建變數, const 無法改變已創建的值, var 是舊版 javaScript 寫法
        /* 變數命名規則
        1.不能使用保留字
        2.開頭不能是數字
        3.不能用特殊符號 除了$ _
        // */
        // let name = "button";
        // let num = 8;

        /*指令會讓網頁跳出提示框
        alert("這是按鈕"); */
        //指令會顯示在網頁F12的console
        // console.log("this is "+ name + num);
        // num = 2;
        // console.log(num);

        // let name = `超文今年`; //`` = 模板字串 ${放入變數}, 也可以直接換行
        // console.log(name);
        // tol += 200; 等於 tol = tol + 200; += -= *= /= 簡寫, +1 可以寫成 ++ 或-1 --

        // 布林值 boolean, 是否 真假, true false, 判斷兩邊的值是否相等 ===, 判斷左右兩邊的值是否不相等 !==
        // console.log(5 > 2) 結果會顯示 true

        //if 判斷式 如果...就...,  else 否則, else if 或是如果
        // 如果下雨 我就開車去上班
        // let isRain = true
        // if (isRain) {
        //     console.log("我就開車去上班") //若不成立, 則不會執行大括號{}裡的程式, 但會執行else 程式
        // } else {
        //     console.log("我就走路去上班");
        // }


        // 如果BMI < 18.5 則過輕
        // 否則 沒有過輕
        // let BMI = 25
        // if (BMI < 18.5) {
        //     console.log("過輕");
        // } else {
        //     console.log("沒有過輕");
        // }

        // 如果BMI < 18.5 則過輕
        // 或是如果BMI < 27 則正常
        // 否則 過重
        // let BMI = 25;
        // if (BMI < 18.5) {
        //     console.log("過輕");
        // } else if (BMI < 27) {
        //     console.log("正常");
        // } else {
        //     console.log("過重");
        // }

        // 邏輯運算 且&& 或|| 非!
        // 如果 18.5 <= BMI < 27 則正常 javascript無法做連續判斷 if (18.5 <= BMI < 27)
        // 18.5 <= BMI 且 BMI < 27  則正常
        // let BMI = 30;
        // if (18.5 <= BMI && BMI < 27) {
        //     console.log("正常");
        // }

        // 如果 BMI < 10 或 BMI > 100    則測量錯誤
        // let BMI = 5;
        // if (BMI < 10  || BMI > 100) {
        //     console.log("測量錯誤");
        // }

        //作用域 scope (全域變數 區域變數) 區域變數:大括號內定義變數只作用於括號內, 出了括號變數即被刪除
        // if (true) {
        //     let a = 0;
        // }
        // if (true) {
        //     let a = 0;
        // }

        //函數(函式) function
        //函數:讓我們重複使用一段程式碼
        //功能:製作好功能 想使用就拿出來用
        // function 定義名稱() {
        //     console.log("你好");
        // }

        // 定義好函數後,不會馬上執行程式,需呼叫函數才會執行
        // function hello() {
        //     console.log("你好");
        //     console.log("布布");
        // }

        // hello(); //也可以重複使用函數
        // hello();

        //函數回傳 return, return下面的程式碼就不會被執行

        //函數參數 parameter 把資料傳到函數裡面去做使用
        // function calculateDiscount(price, discount) { //也可以預設值參數 discount = 0.9
        //     const discountPrice = price * discount;
        //     return discountPrice;
        // }

        // let price = 5000;
        // let discount = 0.8;
        // console.log(calculateDiscount(price,discount));

        //物件 object 把資料結合在一起
        // let product = {
        //     name: "海底撈泡麵",
        //     price: 100
        // }

        // console.log(product.price);
        // product.price = 200;
        // console.log(product.price);

        // product.expiredDate = "2024/02/14"; 可以直接新增屬性進object
        // console.log(product);

        // delete product.price; 刪除屬性內的物件

        // let cart = {
        //     productNum: 0,
        //     product1: 0,
        //     product2: 0,
        //     totalPrice: 0
        // }

        // 物件 object 第二種用法
        // console.log(['totalPrice']); 取得cart屬性內的物件

        // let cart = {     物件內可以再新增物件
        //     productNum: 0,
        //     product1: {
        //         num: 0,
        //         name: '海底撈泡麵',
        //         price: 100
        //     },
        //     product2: 0,
        //     totalPrice: 0
        // }

        // localStorage 儲存資料到瀏覽器, 重新整理網頁資料不會消失, 只能儲存字串
        // localStorage.setItem("price", 1000);
        // 取得儲存的資料
        // localStorage.getItem("price");

        // 用變數把物件儲存起來
        // const cart1 = localStorage.getItem("cart");
        // console.log(typeof cart);

        // 刪除儲存的資料
        // localStorage.removeItem("price");

        // JSON 把物件轉換成 JSON字串格式, 屬性對應的值不能是函數
        // const jsoncart = JSON.stringify(cart);
        
        // //JSON格式轉換成物件 JS格式
        // JSON.parse(jsoncart);

        // const jsoncart = JSON.stringify(cart);
        // localStorage.setItem("cart", jsoncart);
        
        // let cart1 = localStorage.getItem("cart");
        // cart1 = JSON.parse(cart1);
        // console.log(cart1);


        // falsy & truthy value
        // false, "", 0, NaN, undefined, null
        // if (""){
        //     console.log("你好"); // 不會顯示 因為是falsy value 沒有值
        // }
    </script>
</body>

</html>
